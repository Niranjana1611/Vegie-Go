/**
 * @fileoverview added by tsickle
 * Generated from: lib/eauth.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
export class EauthService {
    constructor() { }
    /**
     * @param {?} str
     * @return {?}
     */
    encrypt(str) {
        /** @type {?} */
        let key = CryptoJS.enc.Utf8.parse("elprosystem");
        /** @type {?} */
        let iv = CryptoJS.enc.Utf8.parse("elprosystem");
        /** @type {?} */
        let encrypted = CryptoJS.AES.encrypt(str, key, {
            iv: iv,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7
        });
        return encrypted.toString();
    }
}
EauthService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
/** @nocollapse */
EauthService.ctorParameters = () => [];
/** @nocollapse */ EauthService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function EauthService_Factory() { return new EauthService(); }, token: EauthService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWF1dGguc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2VhdXRoLyIsInNvdXJjZXMiOlsibGliL2VhdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU8zQyxNQUFNLE9BQU8sWUFBWTtJQUN2QixnQkFBZSxDQUFDOzs7OztJQUVoQixPQUFPLENBQUMsR0FBRzs7WUFDTCxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQzs7WUFDNUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7O1lBQzNDLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO1lBQzdDLEVBQUUsRUFBRSxFQUFFO1lBQ04sSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRztZQUN2QixPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLO1NBQzVCLENBQUM7UUFDRixPQUFPLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM5QixDQUFDOzs7WUFmRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8vaW1wb3J0IHsgQ3J5cHRvSlMgfSBmcm9tIFwiLi4vbGliL2Fzc2V0cy9qcy9jcnlwdG8tanMvYWVzXCI7XG5kZWNsYXJlIHZhciBDcnlwdG9KUzogYW55O1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46IFwicm9vdFwiXG59KVxuZXhwb3J0IGNsYXNzIEVhdXRoU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBlbmNyeXB0KHN0cikge1xuICAgIGxldCBrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShcImVscHJvc3lzdGVtXCIpO1xuICAgIGxldCBpdiA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKFwiZWxwcm9zeXN0ZW1cIik7XG4gICAgbGV0IGVuY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5lbmNyeXB0KHN0ciwga2V5LCB7XG4gICAgICBpdjogaXYsXG4gICAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkNCQyxcbiAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzN1xuICAgIH0pO1xuICAgIHJldHVybiBlbmNyeXB0ZWQudG9TdHJpbmcoKTtcbiAgfVxuXG4gIC8vaWQ6IHd1Ynd1Yi0xNC13ZXN0OmUzODlkNDUwLTRkM2YtNDk0OS1hMDg5LWM3ZjAzNDFhMmU2NVxufVxuIl19