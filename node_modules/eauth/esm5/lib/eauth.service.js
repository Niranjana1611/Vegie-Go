/**
 * @fileoverview added by tsickle
 * Generated from: lib/eauth.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
var EauthService = /** @class */ (function () {
    function EauthService() {
    }
    /**
     * @param {?} str
     * @return {?}
     */
    EauthService.prototype.encrypt = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var key = CryptoJS.enc.Utf8.parse("elprosystem");
        /** @type {?} */
        var iv = CryptoJS.enc.Utf8.parse("elprosystem");
        /** @type {?} */
        var encrypted = CryptoJS.AES.encrypt(str, key, {
            iv: iv,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7
        });
        return encrypted.toString();
    };
    EauthService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    EauthService.ctorParameters = function () { return []; };
    /** @nocollapse */ EauthService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function EauthService_Factory() { return new EauthService(); }, token: EauthService, providedIn: "root" });
    return EauthService;
}());
export { EauthService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWF1dGguc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2VhdXRoLyIsInNvdXJjZXMiOlsibGliL2VhdXRoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUkzQztJQUlFO0lBQWUsQ0FBQzs7Ozs7SUFFaEIsOEJBQU87Ozs7SUFBUCxVQUFRLEdBQUc7O1lBQ0wsR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7O1lBQzVDLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDOztZQUMzQyxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtZQUM3QyxFQUFFLEVBQUUsRUFBRTtZQUNOLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUc7WUFDdkIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSztTQUM1QixDQUFDO1FBQ0YsT0FBTyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7Z0JBZkYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs7dUJBTkQ7Q0FzQkMsQUFsQkQsSUFrQkM7U0FmWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4vL2ltcG9ydCB7IENyeXB0b0pTIH0gZnJvbSBcIi4uL2xpYi9hc3NldHMvanMvY3J5cHRvLWpzL2Flc1wiO1xuZGVjbGFyZSB2YXIgQ3J5cHRvSlM6IGFueTtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiBcInJvb3RcIlxufSlcbmV4cG9ydCBjbGFzcyBFYXV0aFNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgZW5jcnlwdChzdHIpIHtcbiAgICBsZXQga2V5ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UoXCJlbHByb3N5c3RlbVwiKTtcbiAgICBsZXQgaXYgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShcImVscHJvc3lzdGVtXCIpO1xuICAgIGxldCBlbmNyeXB0ZWQgPSBDcnlwdG9KUy5BRVMuZW5jcnlwdChzdHIsIGtleSwge1xuICAgICAgaXY6IGl2LFxuICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsXG4gICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczdcbiAgICB9KTtcbiAgICByZXR1cm4gZW5jcnlwdGVkLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvL2lkOiB3dWJ3dWItMTQtd2VzdDplMzg5ZDQ1MC00ZDNmLTQ5NDktYTA4OS1jN2YwMzQxYTJlNjVcbn1cbiJdfQ==